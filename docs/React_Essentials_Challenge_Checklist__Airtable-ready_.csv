Title                                          , Description                                                                                                                                                                                             , Tier    , Category     , Why_It_Matters                                                                , Drill                                                                                      , Proof_of_Mastery                                                                            , Example                                                                                                               , Interview_Prompt                                                , Estimated_Time_Min, Difficulty_1to5, Status     , Notes
Competency scope (80/20)                       , "Focus on day-to-day React skills: JSX, state/effects, lists/keys, forms, composition, context, performance basics, routing, testing. Push fiber internals & exotic patterns to optional."              , Core    , Orientation  , These cover most production code and interview questions without rabbit holes., Skim the table and mark Core as must-do; Pro as stretch; Optional as reference.            , You can build a small app and defend tradeoffs in an interview.                             , n/a                                                                                                                   , What does 'React is just functions + state' mean in practice?   ,                  5,               1, Not started, 
JSX & component basics                         , "Create function components, return JSX, pass props, and render lists/conditionals."                                                                                                                    , Core    , Fundamentals , Everything in React builds on components and JSX.                             , Build <UserCard name='Ada' /> and a list of users with conditional 'Verified' badge.       , No runtime errors; props are typed; UI renders as expected.                                 , function User({name}:{name:string}){return <h3>{name}</h3>}                                                           , How does JSX compile? Why must components be capitalized?       ,                 20,               1, Not started, 
Lists & keys (stable identity)                 , Render arrays with map and use stable keys that survive reordering (not indexes).                                                                                                                       , Core    , Rendering    , Incorrect keys cause subtle state bugs and janky UI.                          , Reorder a list with inputs; observe broken state with index keys; fix with stable keys.    , State sticks with items after reordering; no warnings.                                      , <li key={user.id}>{user.name}</li>                                                                                    , Why are array indexes as keys a bug in reorderable lists?       ,                 15,               2, Not started, 
Props vs state & lifting state                 , Differentiate parent-provided props from component-owned state. Lift state up when multiple children need it.                                                                                           , Core    , State        , Correct ownership prevents prop-drilling & duplication.                       , Build a <SearchBox> controlled by parent; share its value with a <Results> component.      , Single source of truth is obvious; no stale copies.                                         , "const [q,setQ]=useState(''); <SearchBox value={q} onChange={setQ}/>"                                                 , When do you lift state vs derive it locally?                    ,                 20,               2, Not started, 
Controlled inputs & events                     , Wire inputs/selects/textareas as controlled components; handle events without unnecessary re-renders.                                                                                                   , Core    , Forms        , Forms are the #1 source of bugs in apps.                                      , Email/password form with validation message and disabled submit until valid.               , Typing is responsive; state reflects each keystroke; no uncontrolled-to-controlled warnings., <input value={email} onChange={e=>setEmail(e.target.value)} />                                                        , Controlled vs uncontrolled components: tradeoffs?               ,                 25,               2, Not started, 
useState patterns (functional updates)         , Use functional setState when new state depends on old; avoid stale closures.                                                                                                                            , Core    , Hooks        , Prevents race conditions and unnecessary effects.                             , Counter with setCount(c=>c+1) repeated increments; batch updates.                          , No missed increments; predictable updates.                                                  , setCount(c=>c+1)                                                                                                      , Why prefer functional updates sometimes?                        ,                 15,               2, Not started, 
useEffect basics: deps & cleanup               , Run effects for I/O or subscriptions; set dependencies; return cleanup to avoid leaks.                                                                                                                  , Core    , Hooks        , Most interview bugfix tasks involve effect misuse.                            , Subscribe to window resize; clean up on unmount; explain dependency array.                 , No duplicate subscriptions; cleanup runs reliably.                                          , "useEffect(()=>{window.addEventListener('resize',fn);return()=>window.removeEventListener('resize',fn)},[])"          , What belongs in dependencies and why?                           ,                 25,               3, Not started, 
Data fetching with effect + abort              , "Fetch in useEffect, handle loading/error, and cancel with AbortController on re-run/unmount."                                                                                                          , Core    , Data         , Prevents race conditions and zombies in UIs.                                  , Fetch users on query change; cancel previous request; show loading/error states.           , No setState on unmounted component; quick typing cancels prior requests.                    , "const ac=new AbortController(); fetch(url,{signal:ac.signal})"                                                       , How do you avoid stale results when a request arrives late?     ,                 30,               3, Not started, 
useRef for DOM & mutable values                , Use refs for imperative DOM access and stable mutable containers across renders.                                                                                                                        , Core    , Hooks        , Avoids state re-renders for non-UI data and DOM interop.                      , Focus an input with a button; store a timeout ID in a ref.                                 , No unnecessary re-renders; ref.current is used correctly.                                   , const inputRef=useRef<HTMLInputElement>(null); inputRef.current?.focus()                                              , When would you use a ref instead of state?                      ,                 15,               2, Not started, 
"Memoization: React.memo, useMemo, useCallback", Avoid overuse; apply to expensive calculations or stable callback props to prevent child re-renders.                                                                                                    , Core    , Performance  , Right-sized performance without complexity.                                   , Profile a slow list; memo child rows; stabilize item renderer with useCallback.            , Measured re-renders drop; code remains readable.                                            , "const onSelect=useCallback((id)=>{...},[deps])"                                                                      , When does memoization hurt more than it helps?                  ,                 25,               3, Not started, 
Composition patterns (children/slots)          , Compose UI with children render props or simple slot props instead of deep prop drilling.                                                                                                               , Core    , Architecture , Keeps components reusable and ergonomic.                                      , Build a <Card> with header/body/footer slots; pass content from parent.                    , No unnecessary coupling; components remain flexible.                                        , <Card header={...} footer={...}>{content}</Card>                                                                      , Composition vs inheritance in React?                            ,                 20,               2, Not started, 
"Accessibility basics (ARIA, focus, keyboard)" , Prefer semantic HTML; label controls; manage focus; ensure keyboard operability.                                                                                                                        , Core    , Accessibility, Accessibility is a core requirement and an interview topic.                   , Make a modal that traps focus and announces header via aria-labelledby.                    , Tab order is correct; screen readers announce content.                                      , <button aria-label='Close modal' />                                                                                   , How do you make custom components accessible?                   ,                 30,               3, Not started, 
Routing basics (React Router)                  , "Define routes, nested routes, params, and links; handle 404."                                                                                                                                          , Core    , Routing      , Almost every SPA routes views.                                                , "Create /users, /users/:id with nested details; highlight active links."                   , Back/forward works; params load correct data.                                               , <Route path='users/:id' element={<User/>}/>                                                                           , When do you choose client routing vs server routing?            ,                 30,               2, Not started, 
Error boundaries & fallback UI                 , Catch render-time errors with an ErrorBoundary and show user-friendly fallback.                                                                                                                         , Core    , Resilience   , Prevents white screens in production.                                         , Wrap a risky component; log errors; show retry button.                                     , Errors are contained; app remains interactive.                                              , class ErrorBoundary extends React.Component { componentDidCatch(e){...} render(){...} }                               , What can/can’t error boundaries catch?                          ,                 20,               3, Not started, 
Code-splitting with React.lazy + Suspense      , Lazy-load heavy routes/components with Suspense fallback.                                                                                                                                               , Core    , Performance  , Cuts initial bundle for faster interactive time.                              , Split a chart component; show a skeleton while loading.                                    , Network waterfall shows deferred chunk; UI stays responsive.                                , const Chart=React.lazy(()=>import('./Chart')); <Suspense fallback={<Spinner/>}><Chart/></Suspense>                    , How does Suspense differ for code vs data?                      ,                 20,               2, Not started, 
Testing with React Testing Library             , Write tests using roles/labels; simulate user events; avoid testing implementation details.                                                                                                             , Core    , Testing      , Shows you can ship safely and refactor.                                       , "Test a form submit path, success message, and disabled button state."                     , Tests use getByRole/getByLabelText; resilient to refactors.                                 , "userEvent.type(screen.getByLabelText(/email/i),'a@b.com')"                                                           , Why prefer role-based queries over test IDs?                    ,                 35,               3, Not started, 
Context for light global state                 , "Create a typed context, provide it, and consume via a custom hook; avoid rerender storms."                                                                                                             , Pro     , State        , Eliminates prop drilling for app-wide data.                                   , Theme/user session context; memoize value; split providers if needed.                      , Only consumers rerender when value changes; no undefined context errors.                    , const C=createContext<Ctx|undefined>(undefined); function useCtx(){const v=useContext(C); if(!v) throw ...; return v;}, How do you avoid unnecessary rerenders with Context?            ,                 30,               4, Not started, 
useReducer for complex state                   , Use reducers for multi-field state and predictable transitions; integrate with Context if needed.                                                                                                       , Pro     , State        , Reduces effect spaghetti in complex flows.                                    , Wizard form reducer with actions and derived validation state.                             , Actions are typed; transitions are testable.                                                , "function reducer(s,a){switch(a.type){...}} const [s,dispatch]=useReducer(reducer,init)"                              , Reducer vs multiple useState—when and why?                      ,                 30,               3, Not started, 
Custom hooks (extraction & contracts)          , Extract logic to reusable hooks with clear inputs/outputs and cleanup rules.                                                                                                                            , Pro     , Hooks        , Keeps components small and testable.                                          , "useLocalStorage(key), useInterval(cb,delay), useDebouncedValue(value,ms)."                , "Hooks are pure, composable, and have tests."                                               , "function useDebouncedValue(v,ms){...}"                                                                               , What makes a good custom hook API?                              ,                 30,               3, Not started, 
Concurrent UI: useTransition & useDeferredValue, Mark non-urgent updates as transitions; defer expensive rendering tied to fast-typing inputs.                                                                                                           , Pro     , Performance  , Keeps input responsive under heavy UI                                         , Search box filters a big list with useDeferredValue; show pending state with useTransition., Typing remains smooth; UI shows pending feedback.                                           , "const [isPending,startTransition]=useTransition(); startTransition(()=>setFilter(...))"                              , What problems do transitions solve?                             ,                 30,               4, Not started, 
Modals & portals                               , Render modals with React portals; manage focus and scrolling; close on Escape/backdrop.                                                                                                                 , Pro     , Architecture , Common UX with tricky a11y details.                                           , Implement <Modal> that portals to #modal-root and traps focus.                             , Modal behaves correctly across routes and keyboard use.                                     , "createPortal(<div role='dialog'>...</div>, document.getElementById('modal-root')!)"                                  , Why portals? How do you keep them accessible?                   ,                 25,               4, Not started, 
forwardRef & useImperativeHandle (optional)    , "Expose limited imperative APIs from components where necessary (e.g., input.focus())."                                                                                                                 , Optional, Interop      , Useful for complex UI libs and legacy interop.                                , Wrap an input and expose .focus().                                                         , Public API is minimal; no leaking internals.                                                , "export default forwardRef(function FancyInput(props, ref){ useImperativeHandle(ref,()=>({focus(){...}})); ... })"    , When is an imperative handle justified?                         ,                 20,               4, Not started, 
Profiler & performance measuring (optional)    , Use React DevTools Profiler to find wasted renders and heavy commits.                                                                                                                                   , Optional, Performance  , Measure before you memo.                                                      , Profile a slow list before/after memoization.                                              , "Optimizations are driven by numbers, not guesses."                                         , DevTools Profiler flamegraph/snapshot                                                                                 , How do you prove an optimization helped?                        ,                 20,               3, Not started, 
SSR/Next.js essentials (optional)              , Know the basics of server components/SSR vs CSR and data fetching at the framework layer.                                                                                                               , Optional, Platforms    , Many jobs use Next.js; awareness helps interviews.                            , Explain SSR vs CSR tradeoffs; render a page with server data.                              , You can outline hydration and bundle splitting at a high level.                             , Next.js: fetch in server component; stream with Suspense.                                                             , When pick SSR over CSR?                                         ,                 25,               3, Not started, 
Capstone: Searchable list app                  , "Build a searchable list (users/products) with data fetch + abort, list/keys, controlled filter, memoized row, modal details via portal, error boundary, code-split chart, tests for happy/error paths.", Pro     , Capstone     , Combines the 80/20 React set in one realistic app.                            , Ship it as a small repo; include a README and test coverage summary.                       , Smooth typing with transitions/deferred value; stable keys; passing tests; accessible modal., n/a                                                                                                                   , Walk me through your tradeoffs and how you verified performance.,                120,               4, Not started, 
